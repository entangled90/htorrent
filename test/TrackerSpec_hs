-- {-# LANGUAGE OverloadedStrings #-}
-- {-# LANGUAGE RecordWildCards #-}
-- {-# LANGUAGE GeneralizedNewtypeDeriving #-}
-- {-# LANGUAGE DuplicateRecordFields #-}

-- module TrackerSpec where

-- import Tracker
-- import Env
-- import           Prelude
-- import           Test.Hspec
-- import Protocol.Info(mkSHA1Hash)
-- import Protocol.BEncoding
-- import qualified Data.ByteString as BS

-- import Debug.Trace

-- req :: TrackerRequest
-- req = TrackerRequest {
--   infoHash = (mkSHA1Hash "ciao scemo")
--   , peerId = PeerId ("ciao ciao ciao ciao ")
--   , ip = IpAddr "192.168.1.1"
--   , port = Port 6981
--   , uploaded = 923
--   , downloaded = 9091023
--   , bytesLeft = 199123
--   , event = Nothing
-- }

-- spec :: Spec
-- spec = describe "Tracker" $ do
--   contents <- runIO (fileContents)
--     it "should encode tracker requests correctly" $ 
--       let encoded = (encode . encodeFrom) req
--       in traceShow encoded encoded `shouldSatisfy` (\bs -> BS.length bs > 0)

